*** Exercices mongoDB 2019 ***********************************************

1. Exercices via le shell mongo
 
Exercice 1.1 : 
Créer une base de données appeler airbase et deux collections (clients, vols)

use airbase
db.createCollection("clients")
db.createCollection("vols")




Exercice 1.2 :
charger les documents contenus dans les fichiers (.js ou .json) dans vos collections
vos collections créés précédemment



-- Approche 1 : via la commande load qui exécute un .js
-- dans lequel la commande db.collection.insertMay(...)
-- 1Json_collection_Insert_Clients_Airbase.js
-- 1Json_collection_Insert_Vols_Airbase.js

load("./mongo-scripts/0_2Json_collection_Insert_Clients_Airbase.js")
load("./mongo-scripts/0_3Json_collection_Insert_Vols_Airbase.js")



-- Approche 2 : via mongoimport JsonArray
-- Les données sont dans les fichiers :
-- 2Json_collection_Import_Clients_Airbase.json
-- 2Json_collection_Import_Vols_Airbase.json

mongoimport --db airbase --collection clients --type=json --file ./mongo-json/0_4Json_collection_Import_Clients_Airbase.json --jsonArray
mongoimport --db airbase --collection vols --type=json --file ./mongo-json/0_5Json_collection_Import_Vols_Airbase.json --jsonArray


Exercice 1.3 :
Ajouter un client et un vol dans les bonnes collections

Collection CLIENTS
db.clients.insertOne({
  _id: 11,
  nom: 'Choisy',
  prenom: [ 'Sebastien' ],
  telephone: '0606060606',
  DateNaiss: '08/01/1992',
  adresse: {
    numero: 211,
    rue: 'Allée blabla',
    codePostal: '06480',
    ville: 'Nice',
    pays: 'France'
  }
})

Collection VOLS
db.vols.insertOne(  {
      "_id":"121",
      "villeDepart":"Nice",
      "villeArrivee":"Bangkok",
      "heureDepart":"10:25",
      "heureArrivee":"19:45",
      "dateVol":"12/11/2019",
      "appreciations":[
         {
            "idClient":1,
            "notes":[
               {
                  "apid":11,
                  "critereANoter":"SiteWeb",
                  "note":"BIEN"
               },
               {
                  "apid":12,
                  "critereANoter":"Prix",
                  "note":"BIEN"
               },
               {
                  "apid":13,
                  "critereANoter":"Nourritureàbord",
                  "note":"BIEN"
               },
               {
                  "apid":14,
                  "critereANoter":"Qualitésiège",
                  "note":"MOYEN"
               },
               {
                  "apid":15,
                  "critereANoter":"Accueilguichet",
                  "note":"TRES_BIEN"
               },
               {
                  "apid":16,
                  "critereANoter":"Accueilàbord",
                  "note":"EXCELLENT"
               }
            ]
         },
         {
            "idClient":2,
            "notes":[
               {
                  "apid":21,
                  "critereANoter":"SiteWeb",
                  "note":"TRES_BIEN"
               },
               {
                  "apid":22,
                  "critereANoter":"Prix",
                  "note":"MEDIOCRE"
               },
               {
                  "apid":23,
                  "critereANoter":"Nourritureàbord",
                  "note":"BIEN"
               },
               {
                  "apid":24,
                  "critereANoter":"Qualitésiège",
                  "note":"MOYEN"
               },
               {
                  "apid":25,
                  "critereANoter":"Accueilguichet",
                  "note":"TRES_BIEN"
               },
               {
                  "apid":26,
                  "critereANoter":"Accueilàbord",
                  "note":"BIEN"
               }
            ]
         }
      ]
   })

Exercice 1.4 :
Modifier le vol ajouté en 1.3 pour y ajouter les appréciations d'un des clients

db.vols.updateOne({_id:"121"},{$push: {appreciations:{idClient: 3,notes:[{apid:75,critereANoter:"SiteWeb",note:"BIEN"},{apid:76,critereANoter:"Prix",note:"BIEN"},{apid:77,critereANoter:"Nourritureàbord",note:"BIEN"}]}}})

Exercice 1.5 :
Créer un index sur les champs ville, rue et numéro de l'adresse 
d'un client

db.clients.createIndexes([{"adresse.numero":1},{"adresse.rue":1},{"adresse.ville":1}])

Exercice 1.6 : Divers consultations

1.6.1 Afficher tous les clients

-- sans formatage
db.clients.find()
-- Avec formatage
db.clients.find().pretty()

1.6.2 Afficher tous les clients habitant Nice et ayant plus d'un prenom

-- Solution 1
-- $size: 2 =  qui a exactement 2 elements dans l'array prenom

db.clients.find({"adresse.ville":"Nice","prenom":{"$size":2}})

-- Solution 2
-- plus de 2 elements dans dans l'array prenom

db.clients.find({"adresse.ville":"Nice", $where: "this.prenom.length>2"})

-- Solution 3
-- Find all docs that have at least two prenom array elements.
-- nomArray.1 correspond au 2ème élément. prenom[1]

db.clients.find({"adresse.ville":"Nice", "prenom.1": {$exists: true}})

-- Solution 4
$nor effectue une opération NOR logique sur un tableau d'une 
ou plusieurs expressions de requête et sélectionne les 
documents qui échouent à toutes les expressions de requête 
du tableau. Le $nor a la syntaxe suivante :

db.clients.find({$nor:[{"adresse.ville":{$ne: "Nice"}},{"prenom":{"$size":1}}])


1.6.3 Afficher les clients sans leurs adresses

db.clients.find({}, {adresse:0}).pretty();

1.6.4 Afficher les informations sur 1 client ainsi que ses appréciations
sur les vols ( coté serveur)

db.clients.aggregate([{ $match: { "_id": 2 } },{$lookup:{from: "vols",localField: "_id",foreignField:"appreciations.idClient",as:  "clients_vols"}}]).pretty();

1.6.5 Afficher les clients qui habitent à une adresse 
donnée (ville, rue, numero)

db.clients.find({"adresse.ville":"Nice","adresse.rue":"Allée de la Chapelle Saint-Pierre",adresse.numero":12})


1.6.6 Visulisez aussi le plan d'exécution de la requête pour 
voirs si l'index est utilisé

explainVersion: '1',
  queryPlanner: 
   { namespace: 'test.clients',
     indexFilterSet: false,
     parsedQuery: 
      { '$and': 
         [ { 'adresse.numero': { '$eq': 12 } },
           { 'adresse.rue': { '$eq': 'Allée de la Chapelle Saint-Pierre' } },
           { 'adresse.ville': { '$eq': 'Nice' } } ] },
     maxIndexedOrSolutionsReached: false,
     maxIndexedAndSolutionsReached: false,
     maxScansToExplodeReached: false,
     winningPlan: 
      { stage: 'FETCH',
        filter: 
         { '$and': 
            [ { 'adresse.rue': { '$eq': 'Allée de la Chapelle Saint-Pierre' } },
              { 'adresse.ville': { '$eq': 'Nice' } } ] },
        inputStage: 
         { stage: 'IXSCAN',
           keyPattern: { 'adresse.numero': 1 },
           indexName: 'adresse.numero_1',
           isMultiKey: false,
           multiKeyPaths: { 'adresse.numero': [] },
           isUnique: false,
           isSparse: false,
           isPartial: false,
           indexVersion: 2,
           direction: 'forward',
           indexBounds: { 'adresse.numero': [ '[12, 12]' ] } } },
     rejectedPlans: 
      [ { stage: 'FETCH',
          filter: 
           { '$and': 
              [ { 'adresse.numero': { '$eq': 12 } },
                { 'adresse.ville': { '$eq': 'Nice' } } ] },
          inputStage: 
           { stage: 'IXSCAN',
             keyPattern: { 'adresse.rue': 1 },
             indexName: 'adresse.rue_1',
             isMultiKey: false,
             multiKeyPaths: { 'adresse.rue': [] },
             isUnique: false,
             isSparse: false,
             isPartial: false,
             indexVersion: 2,
             direction: 'forward',
             indexBounds: { 'adresse.rue': [ '["Allée de la Chapelle Saint-Pierre", "Allée de la Chapelle Saint-Pierre"]' ] } } },
        { stage: 'FETCH',
          filter: 
           { '$and': 
              [ { 'adresse.numero': { '$eq': 12 } },
                { 'adresse.rue': { '$eq': 'Allée de la Chapelle Saint-Pierre' } } ] },
          inputStage: 
           { stage: 'IXSCAN',
             keyPattern: { 'adresse.ville': 1 },
             indexName: 'adresse.ville_1',
             isMultiKey: false,
             multiKeyPaths: { 'adresse.ville': [] },
             isUnique: false,
             isSparse: false,
             isPartial: false,
             indexVersion: 2,
             direction: 'forward',
             indexBounds: { 'adresse.ville': [ '["Nice", "Nice"]' ] } } },
        { stage: 'FETCH',
          filter: 
           { '$and': 
              [ { 'adresse.numero': { '$eq': 12 } },
                { 'adresse.rue': { '$eq': 'Allée de la Chapelle Saint-Pierre' } },
                { 'adresse.ville': { '$eq': 'Nice' } } ] },
          inputStage: 
           { stage: 'AND_SORTED',
             inputStages: 
              [ { stage: 'IXSCAN',
                  keyPattern: { 'adresse.numero': 1 },
                  indexName: 'adresse.numero_1',
                  isMultiKey: false,
                  multiKeyPaths: { 'adresse.numero': [] },
                  isUnique: false,
                  isSparse: false,
                  isPartial: false,
                  indexVersion: 2,
                  direction: 'forward',
                  indexBounds: { 'adresse.numero': [ '[12, 12]' ] } },
                { stage: 'IXSCAN',
                  keyPattern: { 'adresse.rue': 1 },
                  indexName: 'adresse.rue_1',
                  isMultiKey: false,
                  multiKeyPaths: { 'adresse.rue': [] },
                  isUnique: false,
                  isSparse: false,
                  isPartial: false,
                  indexVersion: 2,
                  direction: 'forward',
                  indexBounds: { 'adresse.rue': [ '["Allée de la Chapelle Saint-Pierre", "Allée de la Chapelle Saint-Pierre"]' ] } } ] } },
        { stage: 'FETCH',
          filter: 
           { '$and': 
              [ { 'adresse.numero': { '$eq': 12 } },
                { 'adresse.ville': { '$eq': 'Nice' } },
                { 'adresse.rue': { '$eq': 'Allée de la Chapelle Saint-Pierre' } } ] },
          inputStage: 
           { stage: 'AND_SORTED',
             inputStages: 
              [ { stage: 'IXSCAN',
                  keyPattern: { 'adresse.numero': 1 },
                  indexName: 'adresse.numero_1',
                  isMultiKey: false,
                  multiKeyPaths: { 'adresse.numero': [] },
                  isUnique: false,
                  isSparse: false,
                  isPartial: false,
                  indexVersion: 2,
                  direction: 'forward',
                  indexBounds: { 'adresse.numero': [ '[12, 12]' ] } },
                { stage: 'IXSCAN',
                  keyPattern: { 'adresse.ville': 1 },
                  indexName: 'adresse.ville_1',
                  isMultiKey: false,
                  multiKeyPaths: { 'adresse.ville': [] },
                  isUnique: false,
                  isSparse: false,
                  isPartial: false,
                  indexVersion: 2,
                  direction: 'forward',
                  indexBounds: { 'adresse.ville': [ '["Nice", "Nice"]' ] } } ] } },
        { stage: 'FETCH',
          filter: 
           { '$and': 
              [ { 'adresse.rue': { '$eq': 'Allée de la Chapelle Saint-Pierre' } },
                { 'adresse.ville': { '$eq': 'Nice' } },
                { 'adresse.numero': { '$eq': 12 } } ] },
          inputStage: 
           { stage: 'AND_SORTED',
             inputStages: 
              [ { stage: 'IXSCAN',
                  keyPattern: { 'adresse.rue': 1 },
                  indexName: 'adresse.rue_1',
                  isMultiKey: false,
                  multiKeyPaths: { 'adresse.rue': [] },
                  isUnique: false,
                  isSparse: false,
                  isPartial: false,
                  indexVersion: 2,
                  direction: 'forward',
                  indexBounds: { 'adresse.rue': [ '["Allée de la Chapelle Saint-Pierre", "Allée de la Chapelle Saint-Pierre"]' ] } },
                { stage: 'IXSCAN',
                  keyPattern: { 'adresse.ville': 1 },
                  indexName: 'adresse.ville_1',
                  isMultiKey: false,
                  multiKeyPaths: { 'adresse.ville': [] },
                  isUnique: false,
                  isSparse: false,
                  isPartial: false,
                  indexVersion: 2,
                  direction: 'forward',
                  indexBounds: { 'adresse.ville': [ '["Nice", "Nice"]' ] } } ] } } ] },
  command: 
   { find: 'clients',
     filter: 
      { 'adresse.ville': 'Nice',
        'adresse.rue': 'Allée de la Chapelle Saint-Pierre',
        'adresse.numero': 12 },
     '$db': 'test' },
  serverInfo: 
   { host: 'DESKTOP-VV3O8BT',
     port: 27017,
     version: '5.0.7',
     gitVersion: 'b977129dc70eed766cbee7e412d901ee213acbda' },
  serverParameters: 
   { internalQueryFacetBufferSizeBytes: 104857600,
     internalQueryFacetMaxOutputDocSizeBytes: 104857600,
     internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
     internalDocumentSourceGroupMaxMemoryBytes: 104857600,
     internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
     internalQueryProhibitBlockingMergeOnMongoS: 0,
     internalQueryMaxAddToSetBytes: 104857600,
     internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600 },
  ok: 1 }

1.6.7a Afficher les clients dont les noms commencent par une 
lettre donnée

db.clients.find({"nom":/^M/})

1.6.7b Afficher les clients dont les noms finissent par une 
lettre donnée

db.clients.find({"nom":/n$/})

1.6.7c Afficher les clients dont les noms contiennent une 
lettre donnée

db.clients.find({"nom":/n/})

1.6.7d Afficher les clients dont les noms contienncent une sous-chaîne

db.clients.find({"nom":/Du/})

1.6.7e Afficher les clients dont les noms commencent avec une lettre
et finissent avec une lettre


db.clients.find({$and:[{"nom":/^B/},{"nom":/d$/}]})

1.6.8 Supprimer le client fournit en 1.3

db.clients.deleteOne({"nom":"Choisy"})

1.6.9 Trier les vols selon la date du vol. N'afficher 
que : Nr vol, VD, VA, dataVol

db.vols.aggregate([ 
  {
    $project: {
	"_id":"$_id",
	"villeDepart":"$villeDepart",
	"villeArrivee":"$villeArrivee",
        "dateVol": {
	  $dateFromString: {
              dateString: '$dateVol', 
              format: "%d/%m/%Y"
          }
	}
    }
  },{$sort: {dateVol:1}} 
])


1.6.10 Compter le nombre de notes, appreciations et note par vol

db.vols.aggregate([
  {
    $facet: {
      "Nombre d'appreciations": [
        {
          $unwind: "$appreciations"
        },
        {
          $group: {
            _id: "$_id",
            count: {
              $sum: 1
            }
          }
        }
      ],
      "Nombre de notes": [
        {
          $unwind: "$appreciations"
        },
        {
          $unwind: "$appreciations.notes"
        },
        {
          $group: {
            _id: "$_id",
            count: {
              $sum: 1
            }
          }
        }
      ],
      "Nombre de note": [
        {
          $unwind: "$appreciations"
        },
        {
          $unwind: "$appreciations.notes"
        },
        {
          $group: {
            _id: "$_id",
            count: {
              $sum: 1
            }
          }
        }
      ]
    }
  }
])


1.7 Utilisation des validateurs 

Créer progressivement une une collection client0 
puis une collection vols0.
L'objectif est de pouvoir :
- imposer des champs
- imposer des types à des champs
- imposer des valeurs à des champs
- Interdire l'ajout de nouveaux champs.


1.7.1 Construction progressive d'un valideur sur la collection client0
1.7.1.1 Créer et tester le validateur ci-dessous
db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
		 additionalProperties: false,
         required: [ "nom","_id"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            }
		}
		}
	}
}
);

-- ajouter le document ci-dessous 
-- que se passe-t-il ?
db.clients0.insertOne({_id:1, "nom":"Bill"});
document failed validation, car le field _id n'est pas déclaré dans les props et additionalsProperties est false.

-- ajouter un document avec le champs prenom
-- que se passe-t-il ?
db.clients0.insertOne({_id:2,"nom":"Zembla", prenom:"Lefort"});
document failed validation, car le field _id et prenom ne sont pas déclarés dans les props et additionalsProperties est false.

1.7.1.2 Interdire l'ajout d'autres champs y compris prenoms et vérifier
-- Supprimer et récréer la collection avec validateur
-- Interdire l'ajout d'autres champs y compris prenoms
-- quelle est la bonne syntaxe ?
db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
		 additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
          _id: { bsonType: "int" }
		}
		}
	}
}
);


-- Vérifier qu'il n'est plus possible d'ajouter un champs prénom
db.clients0.insertOne({_id:1, nom:"Bill"})

db.clients0.insertOne({_id:2,nom:"Bill", prenom:"Lefort2"});


1.7.1.3 ajouter à la collection clients0 le champ : prenoms
-- Le champ prenom doit être de type : string
-- Les seuls possibles sont : Pierre, Adam, Mohamed, Akim, Joel

db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
		 additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
	    prenom: {
               bsonType: "string",
               description: "must be a string and is required",
	       enum:["Pierre","Adam","Mohamed","Akim","Joel"]
            }, 
          _id: { bsonType: "int" }
		}
		}
	}
}
);


-- Tester et véfier les cas ou cela marche ou échoue
db.clients0.insertOne({_id:1, nom:"Bill"}) fonctionne
db.clients0.insertOne({_id:2,nom:"Bill", prenom:"Lefort2"}) échoue
db.clients0.insertOne({_id:2,nom:"Bill", prenom:"Adam"}) fonctionne

1.7.1.4 Ajouter un champ dateNaiss de type date à la collection clients0

db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
		 additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
	    prenom: {
               bsonType: "string",
               description: "must be a string",
	       enum:["Pierre","Adam","Mohamed","Akim","Joel"]
            }, 
	    dateNaiss: {
               bsonType: "date",
               description: "must be a ISO type"
            },
          _id: { bsonType: "int" }
		}
		}
	}
}
);
-- Tester et vérifier un cas d'échec ou de réussite

Cas de réussite
db.clients0.insertOne(
	{
		_id:1,
		nom:"Bill", 
		prenom:"Joel",
		dateNaiss:new Date("1980-12-12")
	}
);
Cas d'échec
db.clients0.insertOne(
	{
		_id:1,
		nom:"Bill", 
		prenom:"Joel",
		dateNaiss:"08/01/1992"
	}
);

1.7.1.5 ajouter un champ chiffreDaffaire, le chiffre d'affaire
doit être compris entre 0 et 10000000.00
db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
		 additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
	    prenom: {
               bsonType: "string",
               description: "must be a string",
	       enum:["Pierre","Adam","Mohamed","Akim","Joel"]
            }, 
	    dateNaiss: {
               bsonType: "date",
               description: "must be a ISO type"
            },
            chiffreDaffaire: {
               bsonType: "number",
	       minimum: 0,
               maximum: 10000000,
               description: "chiffreDaffaire must be between 0 and 10000000"
            },
          _id: { bsonType: "int" }
		}
		}
	}
}
);

-- Tester et vérifier avec un cas d'échec ou de réussite
Cas de réussite
db.clients0.insertOne(
	{
		_id:1,
		nom:"Bill", 
		prenom:"Joel",
		dateNaiss:new Date("1980-12-12"),
		chiffreDaffaire:NumberDecimal("5.5")
	}
);
Cas d'échec
db.clients0.insertOne(
	{
		_id:2,
		nom:"Adams", 
		prenom:"Adam",
		dateNaiss:new Date("1982-12-12"),
		chiffreDaffaire:NumberDecimal("-5.5")
	}
);

1.7.1.6 ajouter un champ adresse obligatoire qui est une structure
-- adresse contient les champs suivants :
numero de type entier
rue de type string
ville de type string
codePostal de type string
Pays de type String


db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
	    prenom: {
               bsonType: "string",
               description: "must be a string",
	       enum:["Pierre","Adam","Mohamed","Akim","Joel"]
            }, 
	    dateNaiss: {
               bsonType: "date",
               description: "must be a ISO type"
            },
            chiffreDaffaire: {
               bsonType: "number",
	       minimum: 0,
               maximum: 10000000,
               description: "chiffreDaffaire must be between 0 and 10000000"
            },
	    adresse: {
              bsonType: "object",
	      properties: {
	    	numero: {
	       	   bsonType: "int",
                   description: "must be an integer"
                },
 	        rue: {
	           bsonType: "string",
	           description: "must be a string"
                },
 	        "ville": {
 	           bsonType: "string",
                   description: "must be a string"
            	},
            	codePostal: {
               	   bsonType: "string",
	           description: "must be a string"
            	},
               pays: {
                  bsonType: "string",
                  description: "must be a string"
                }
             }
           },
          _id: { 
             bsonType: "int" 
           }
	}
      }
    }
}
);
-- vous pouvez mettre les commandes dans un fichier
-- s'il y a trop de lignes
load("D:/tpmongodb2021_G2/exomogo/exoValidator.js");
-- insertion d'une adresse correcte !
db.clients0.insertOne(
	{
		_id:1,
		nom:"Bill", 
		prenom:"Joel",
		dateNaiss:new Date("1980-12-12"),
		chiffreDaffaire:NumberDecimal("100000.0"),
		adresse: {
		   numero: 64,
		   rue: "Une rue",
		   codePostal: "06000",
		   ville: "Grasse",
		   pays: "France"
		}	
	}
);

-- Insertion d'une adresse avec le champ : continent

db.clients0.insertOne(
	{
		_id:2,
		nom:"Bill2", 
		prenom:"Joel",
		dateNaiss:new Date("1982-12-12"),
		chiffreDaffaire:NumberDecimal("10000.0"),
		adresse: {
		   numero: 10,
		   rue: "Félix Faure",
		   codePostal: "06000",
		   ville: "Nice",
		   pays: "France",
		   continent:"Europe"
		}	
	}
);

1.7.1.7 Interdire l'ajout de champs dans structure : adresse et confirmer continent


db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
	    prenom: {
               bsonType: "string",
               description: "must be a string",
	       enum:["Pierre","Adam","Mohamed","Akim","Joel"]
            }, 
	    dateNaiss: {
               bsonType: "date",
               description: "must be a ISO type"
            },
            chiffreDaffaire: {
               bsonType: "number",
	       minimum: 0,
               maximum: 10000000,
               description: "chiffreDaffaire must be between 0 and 10000000"
            },
	    adresse: {
              bsonType: "object",
              additionalProperties: false,
	      properties: {
	    	numero: {
	       	   bsonType: "int",
                   description: "must be an integer"
                },
 	        rue: {
	           bsonType: "string",
	           description: "must be a string"
                },
 	        "ville": {
 	           bsonType: "string",
                   description: "must be a string"
            	},
            	codePostal: {
               	   bsonType: "string",
	           description: "must be a string"
            	},
                pays: {
                  bsonType: "string",
                  description: "must be a string"
                },
	        continent: {
                  bsonType: "string",
                  description: "must be a string"
               }
             }
           },
          _id: { 
             bsonType: "int" 
           }
	}
      }
    }
}
);
-- Insertion correction ?


db.clients0.insertOne(
	{
		_id:1,
		nom:"Bill", 
		prenom:"Joel",
		dateNaiss:new Date("1980-12-12"),
		chiffreDaffaire:NumberDecimal("12000.0"),
		adresse: {
		   numero: 64,
		   rue: "Une rue",
		   codePostal: "06000",
		   ville: "Grasse",
		   pays: "France",
		   continent: "Europe"
		}	
	}
);

{ acknowledged: true, insertedId: 1 }


-- Insertion avec violation de la limitation du nombre de champ dans :adresse

db.clients0.insertOne(
	{
		_id:2,
		nom:"Buffalo", 
		prenom:"Mohamed",
		dateNaiss:new Date("1985-12-12"),
		chiffreDaffaire:NumberDecimal("122000.0"),
		adresse: {
		   numero: 1,
		   rue: "Une rue",
		   codePostal: "75000",
		   ville: "Paris",
		   pays: "France",
		   continent: "Europe",
		   planete : "Terre"
		}	
	}
);

MongoServerError: Document failed validation

1.7.1.7 Ajouter un champ autresPrenoms de type Array.

db.clients0.drop();
db.createCollection("clients0", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         additionalProperties: false,
         required: [ "nom"],
         properties: {
            nom: {
               bsonType: "string",
               description: "must be a string and is required"
            },
	    prenom: {
               bsonType: "string",
               description: "must be a string",
	       enum:["Pierre","Adam","Mohamed","Akim","Joel"]
            }, 
	    dateNaiss: {
               bsonType: "date",
               description: "must be a ISO type"
            },
            chiffreDaffaire: {
               bsonType: "number",
	       minimum: 0,
               maximum: 10000000,
               description: "chiffreDaffaire must be between 0 and 10000000"
            },
	    adresse: {
              bsonType: "object",
              additionalProperties: false,
	      properties: {
	    	numero: {
	       	   bsonType: "int",
                   description: "must be an integer"
                },
 	        rue: {
	           bsonType: "string",
	           description: "must be a string"
                },
 	        "ville": {
 	           bsonType: "string",
                   description: "must be a string"
            	},
            	codePostal: {
               	   bsonType: "string",
	           description: "must be a string"
            	},
                pays: {
                  bsonType: "string",
                  description: "must be a string"
                },
	       continent: {
                  bsonType: "string",
                  description: "must be a string"
               }
             }
           },
          _id: { 
             bsonType: "int" 
          },
	  autresPrenoms: {
	    bsonType: "array",
	    description: "must be an array of strings",
            items: {
              bsonType: "string"
	    },
	    minItems: 1,
	  }
	}
      }
    }
}
);
-- Ajout d'un document avec le champs autresPrenoms correcte
db.clients0.insertOne(
	{
		_id:1,
		nom:"Bill", 
		prenom:"Adam",
		dateNaiss:new Date("1980-12-12"),
		chiffreDaffaire:NumberDecimal("122000.0"),
		adresse: {
		   numero: 64,
		   rue: "Une rue",
		   codePostal: "06000",
		   ville: "Grasse",
		   pays: "France",
		   continent: "Europe"
		}, 
		autresPrenoms:["Jolie", "Lebeau"]
	}
);

-- Insertion avec violation des contraintes sur l'array autresPrenoms

db.clients0.insertOne(
	{
		_id:2,
		nom:"Bill2", 
		prenom:"Adam",
		dateNaiss:new Date("1980-12-12"),
		chiffreDaffaire:NumberDecimal("122000.0"),
		adresse: {
		   numero: 64,
		   rue: "Une rue",
		   codePostal: "06000",
		   ville: "Grasse",
		   pays: "France",
		   continent: "Europe"
		}, 
		autresPrenoms:[]
	}
);


1.7.2 Construire un validateur pour les documents de la collection vols0 
Les contraintes :
	- Tous les champs sont obligatoires 
	- _id doit être un entier
	- Les string doivent être de type string
	- la date de vol doit être une date
	- Les champs numériques doivent être de type number ou decimal
	- Le champ appreciations est une structure contenant les champs
²	idClient et l'array notes
	- Chaque items dans l'array notes est une structure avec les restrictifs:
		. "apid":"073",
        . "critereANoter"
		. note 	
	- Le champs critereANoter ne peut prendre que les valeurs suivantes :
		"SiteWeb","Prix", "Nourritureàbord", "Qualitésiège", "Accueilguichet"
		Nota : Il est impossible d'ajouter de nouveaux critères à notes.
	- Le champs note ne peut prendre que les valeurs suivantes:
		EXCELLENT, TRES_BIEN, BIEN, MOYEN, MEDIOCRE, PASSABLE
		Nota : Il est impossible d'ajouter de nouvelles notes.
	- Effectuer les tests au fur et à mesure


db.vols0.drop();
db.createCollection("vols0", {
"validator": {
      "$jsonSchema": {
         "bsonType": "object",
		 "additionalProperties": false,
         "required": [ "_id", "villeDepart", "villeArrivee", "heureDepart", "heureArrivee", "dateVol", "appreciations"],
         "properties": {
            "_id": {
               "bsonType": "int",
               "description": "must be an integer and is required"
            },
			"villeDepart": {
               "bsonType": "string",
               "description": "must be a string and is required",
            }, 
			"villeArrivee": {
               "bsonType": "string",
               "description": "must be a string and is required"
            },
            "heureDepart": {
               "bsonType": "string",
			   "description": "must be a string and is required"
            },
			"heureArrivee": {
               "bsonType": "string",
			   "description": "must be a string and is required"
            },
			"dateVol": {
               "bsonType": "date",
			   "description": "must be ISO type and is required"
            },
			"appreciations": {
				"bsonType": "array",
				"items": {
					 "bsonType": "object",
					 "properties": {
						"idClient": {
							"bsonType": "int",
							"description": "must be an integer"
						},
						"notes": {
							"bsonType": "array",
							"description": "must be an array",
							"items": {
								"bsonType": "object",
								"properties": {
									"apid": {
										"enum":["073"],
										"description": "must be 073"
									},
									"critereANoter": {
										"enum": ["SiteWeb","Prix", "Nourritureàbord", "Qualitésiège", "Accueilguichet"],
										"description": "must be SiteWeb, Prix, Nourritureàbord, Qualitésiège or Accueilguichet"
									},
									"note": {
										"enum": ["EXCELLENT", "TRES_BIEN", "BIEN", "MOYEN", "MEDIOCRE", "PASSABLE"],
										"description": "EXCELLENT, TRES_BIEN, BIEN, MOYEN, MEDIOCRE or PASSABLE"
									}	
								}
							},
						}
					}
				},
			}
		}
	
	}
}

}
);	

db.vols0.insertOne(
	{
      "_id":100,
      "villeDepart":"Nice",
      "villeArrivee":"Paris",
      "heureDepart":"10:15",
      "heureArrivee":"11:45",
      "dateVol": new Date("2018-11-18"),
      "appreciations":[
         {
            "idClient":1,
            "notes":[
               {
                  "apid":11,
                  "critereANoter":"SiteWeb",
                  "note":"BIEN"
               },
               {
                  "apid":12,
                  "critereANoter":"Prix",
                  "note":"BIEN"
               },
               {
                  "apid":13,
                  "critereANoter":"Nourritureàbord",
                  "note":"BIEN"
               },
               {
                  "apid":14,
                  "critereANoter":"Qualitésiège",
                  "note":"MOYEN"
               },
               {
                  "apid":15,
                  "critereANoter":"Accueilguichet",
                  "note":"TRES_BIEN"
               },
               {
                  "apid":16,
                  "critereANoter":"Accueilàbord",
                  "note":"EXCELLENT"
               }
            ]
         },
         {
            "idClient":2,
            "notes":[
               {
                  "apid":21,
                  "critereANoter":"SiteWeb",
                  "note":"TRES_BIEN"
               },
               {
                  "apid":22,
                  "critereANoter":"Prix",
                  "note":"MEDIOCRE"
               },
               {
                  "apid":23,
                  "critereANoter":"Nourritureàbord",
                  "note":"BIEN"
               },
               {
                  "apid":24,
                  "critereANoter":"Qualitésiège",
                  "note":"MOYEN"
               },
               {
                  "apid":25,
                  "critereANoter":"Accueilguichet",
                  "note":"TRES_BIEN"
               },
               {
                  "apid":26,
                  "critereANoter":"Accueilàbord",
                  "note":"BIEN"
               }
            ]
         }
      ]
   }
);
